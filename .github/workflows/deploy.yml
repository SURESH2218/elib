name: Deploy to Production

on:
  push:
    branches:
      - main # Deploy when pushing to main
      - develop # Or develop for staging
  workflow_dispatch: # Manual trigger

env:
  ECR_REPOSITORY: elib-backend
  AWS_REGION: ap-south-1

jobs:
  # ============================================
  # JOB 1: BUILD & PUSH DOCKER IMAGE
  # ============================================
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata (tags, labels)
        id: meta
        run: |
          # Generate image tag: sha-abc1234 and latest
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:sha-${SHORT_SHA}"
          LATEST_TAG="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"

          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_TAG }}
            ${{ env.LATEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Image digest
        run: |
          echo "✅ Image pushed successfully!"
          echo "📦 Image: ${{ env.IMAGE_TAG }}"

  # ============================================
  # JOB 2: DEPLOY TO PRODUCTION (ZERO DOWNTIME)
  # ============================================
  deploy:
    name: Deploy to EC2 with Zero Downtime
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
          AWS_REGION: ${{ env.AWS_REGION }}
          MONGO_URI: ${{ secrets.MONGO_URI_PROD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_PROD }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG,AWS_REGION,MONGO_URI,JWT_SECRET
          script: |
            #!/bin/bash
            set -e

            echo "🚀 Starting deployment..."

            # Login to ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

            # Pull new image
            echo "📥 Pulling new image: $IMAGE_TAG"
            docker pull $IMAGE_TAG

            # Create deployment directory if not exists
            mkdir -p ~/elib-backend
            cd ~/elib-backend

            # Create docker-compose.prod.yml with new image
            cat > docker-compose.prod.yml <<EOF
            version: '3.8'

            services:
              mongoserver:
                image: mongo:7.0
                container_name: mongodb-server
                environment:
                  - MONGO_INITDB_ROOT_USERNAME=root
                  - MONGO_INITDB_ROOT_PASSWORD=root
                volumes:
                  - mongo-data:/data/db
                networks:
                  - elib-network
                restart: unless-stopped
                healthcheck:
                  test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
                  interval: 10s
                  timeout: 5s
                  retries: 5

              backendapi:
                image: $IMAGE_TAG
                container_name: elib-backend-server
                ports:
                  - "8000:8000"
                networks:
                  - elib-network
                environment:
                  - NODE_ENV=production
                  - MONGO_URI=$MONGO_URI
                  - JWT_SECRET=$JWT_SECRET
                depends_on:
                  mongoserver:
                    condition: service_healthy
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/health"]
                  interval: 10s
                  timeout: 5s
                  retries: 3
                  start_period: 40s

            networks:
              elib-network:
                driver: bridge

            volumes:
              mongo-data:
            EOF

            # Deploy with zero downtime
            echo "🔄 Deploying new version..."
            docker-compose -f docker-compose.prod.yml up -d --no-deps --build backendapi

            # Wait for health check
            echo "⏳ Waiting for health check..."
            sleep 15

            # Verify deployment
            if docker ps | grep -q elib-backend-server; then
              echo "✅ Deployment successful!"
              
              # Cleanup old images (keep last 3)
              docker images $ECR_REGISTRY/$ECR_REPOSITORY --format "{{.ID}} {{.CreatedAt}}" | sort -rk 2 | awk 'NR>3 {print $1}' | xargs -r docker rmi || true
              
              # Show running containers
              docker ps --filter "name=elib"
            else
              echo "❌ Deployment failed! Rolling back..."
              docker-compose -f docker-compose.prod.yml logs backendapi
              exit 1
            fi

      - name: Deployment Status
        if: success()
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application URL: http://${{ secrets.EC2_HOST }}:8000"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Check logs above."
