name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  ECR_REPOSITORY: elib-backend
  AWS_REGION: ap-south-1

jobs:
  # ============================================
  # JOB 1: BUILD & PUSH DOCKER IMAGE
  # ============================================
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.meta.outputs.image-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata (tags, labels)
        id: meta
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:sha-${SHORT_SHA}"
          LATEST_TAG="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"
          
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          
          echo "Generated IMAGE_TAG: ${IMAGE_TAG}"
          echo "Generated LATEST_TAG: ${LATEST_TAG}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_TAG }}
            ${{ env.LATEST_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Image digest
        run: |
          echo "✅ Image pushed successfully!"
          echo "📦 Image: ${{ env.IMAGE_TAG }}"

  # ============================================
  # JOB 2: DEPLOY TO PRODUCTION (ZERO DOWNTIME)
  # ============================================
  deploy:
    name: Deploy to EC2 with Zero Downtime
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout deployment scripts
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Debug - Print image tag
        run: |
          echo "🔍 DEBUG: Image tag from build job:"
          echo "IMAGE_TAG: ${{ needs.build.outputs.image-tag }}"
          if [ -z "${{ needs.build.outputs.image-tag }}" ]; then
            echo "❌ ERROR: IMAGE_TAG is empty!"
            exit 1
          fi

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
          AWS_REGION: ${{ env.AWS_REGION }}
          MONGO_URI: ${{ secrets.MONGO_URI_PROD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_PROD }}
          CLOUD_NAME: ${{ secrets.CLOUD_NAME }}
          CLOUD_API_KEY: ${{ secrets.CLOUD_API_KEY }}
          CLOUD_API_SECRET: ${{ secrets.CLOUD_API_SECRET }}
          FRONTEND_DOMAIN: ${{ secrets.FRONTEND_DOMAIN }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG,AWS_REGION,MONGO_URI,JWT_SECRET,CLOUD_NAME,CLOUD_API_KEY,CLOUD_API_SECRET,FRONTEND_DOMAIN
          script: |
            #!/bin/bash
            set -e
            
            echo "🚀 Starting deployment..."
            echo "📦 Image to deploy: $IMAGE_TAG"
            
            if [ -z "$IMAGE_TAG" ]; then
              echo "❌ ERROR: IMAGE_TAG is empty!"
              exit 1
            fi
            
            # Login to ECR
            echo "🔐 Logging into ECR..."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            # Pull new image
            echo "📥 Pulling new image: $IMAGE_TAG"
            docker pull "$IMAGE_TAG"
            
            # Create deployment directory
            mkdir -p ~/elib-backend
            cd ~/elib-backend
            
            # Ensure MongoDB is running
            if ! docker ps | grep -q mongodb-server; then
              echo "🔄 Starting MongoDB..."
              docker run -d \
                --name mongodb-server \
                --network elib-backend_elib-network \
                -e MONGO_INITDB_ROOT_USERNAME=root \
                -e MONGO_INITDB_ROOT_PASSWORD=root \
                -v mongo-data:/data/db \
                --restart unless-stopped \
                mongo:7.0 || echo "MongoDB already exists, continuing..."
              
              # Create network if doesn't exist
              docker network create elib-backend_elib-network 2>/dev/null || true
              
              # Wait for MongoDB
              sleep 10
            fi
            
            # Blue-Green Deployment Strategy
            echo "🔄 Starting blue-green deployment..."
            
            # Determine current and new configuration
            if docker ps | grep -q "elib-backend-server" && ! docker ps | grep -q "elib-backend-server-new"; then
              CURRENT_CONTAINER=elib-backend-server
              NEW_CONTAINER=elib-backend-server-new
              NEW_PORT=8001
              echo "📍 Current container: elib-backend-server (port 8000)"
              echo "📍 New container: elib-backend-server-new (port 8001)"
            else
              CURRENT_CONTAINER=elib-backend-server-new
              NEW_CONTAINER=elib-backend-server
              NEW_PORT=8000
              echo "📍 Current container: elib-backend-server-new (port 8001)"
              echo "📍 New container: elib-backend-server (port 8000)"
            fi
            
            # Start new container on alternate port
            echo "🚀 Starting new container: $NEW_CONTAINER on port $NEW_PORT..."
            docker run -d \
              --name $NEW_CONTAINER \
              --network elib-backend_elib-network \
              -p 127.0.0.1:$NEW_PORT:8000 \
              -e NODE_ENV=production \
              -e PORT=8000 \
              -e MONGO_URI="$MONGO_URI" \
              -e JWT_SECRET="$JWT_SECRET" \
              -e CLOUD_NAME="$CLOUD_NAME" \
              -e CLOUD_API_KEY="$CLOUD_API_KEY" \
              -e CLOUD_API_SECRET="$CLOUD_API_SECRET" \
              -e FRONTEND_DOMAIN="$FRONTEND_DOMAIN" \
              --restart unless-stopped \
              "$IMAGE_TAG"
            
            # Wait for new container to be healthy
            echo "⏳ Waiting for new container health check..."
            HEALTH_CHECK_PASSED=false
            for i in {1..30}; do
              sleep 2
              if docker exec $NEW_CONTAINER wget --quiet --tries=1 --spider http://localhost:8000/health 2>/dev/null; then
                echo "✅ New container is healthy!"
                HEALTH_CHECK_PASSED=true
                break
              fi
              echo "Attempt $i/30: Health check in progress..."
            done
            
            if [ "$HEALTH_CHECK_PASSED" = false ]; then
              echo "❌ Health check failed after 60 seconds!"
              echo "📋 Container logs:"
              docker logs --tail 50 $NEW_CONTAINER
              docker rm -f $NEW_CONTAINER
              exit 1
            fi
            
            # Give nginx time to detect the new backend
            echo "✅ New container is serving traffic via nginx"
            sleep 5
            
            # Stop and remove old container
            if docker ps -a | grep -q $CURRENT_CONTAINER; then
              echo "🗑️ Removing old container: $CURRENT_CONTAINER..."
              docker stop $CURRENT_CONTAINER 2>/dev/null || true
              docker rm $CURRENT_CONTAINER 2>/dev/null || true
              echo "✅ Old container removed"
            fi
            
            # Cleanup old images (keep last 3)
            echo "🧹 Cleaning up old images..."
            docker images $ECR_REGISTRY/$ECR_REPOSITORY --format "{{.ID}} {{.CreatedAt}}" | sort -rk 2 | awk 'NR>3 {print $1}' | xargs -r docker rmi 2>/dev/null || true
            
            # Show running containers
            echo "📊 Running containers:"
            docker ps --filter "name=elib" --filter "name=mongodb"
            
            echo ""
            echo "✅ Blue-green deployment completed successfully!"
            echo "🌐 Active container: $NEW_CONTAINER on port $NEW_PORT"

      - name: Deployment Status
        if: success()
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application URL: https://elib.18xdevs.site"
          echo "🏥 Health Check: https://elib.18xdevs.site/health"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Check logs above."
          echo "💡 Common issues:"
          echo "  - IMAGE_TAG is empty"
          echo "  - ECR authentication failed"
          echo "  - Health check timeout"
          echo "  - Missing environment variables"
          echo "  - Network connectivity issues"